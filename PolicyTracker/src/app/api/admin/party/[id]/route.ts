import { NextRequest, NextResponse } from "next/server";
import driver from "@/app/lib/neo4j";
import { pool } from "@/app/lib/postgres";
import { storage } from "@/app/lib/firebase"; // firebase client you‚Äôve set up
import { ref, deleteObject } from "firebase/storage";

export async function GET(
  req: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  const { id } = await context.params; // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á await
  const numericId = parseInt(id);

  if (isNaN(numericId)) {
    return NextResponse.json({ error: "ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }, { status: 400 });
  }

  const session = driver.session();

  try {
    const result = await session.run(
      `
      MATCH (p:Party {id: $id})
      RETURN p.name AS name, p.description AS description, p.link AS link
      `,
      { id }
    );

    if (result.records.length === 0) {
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏£‡∏£‡∏Ñ" }, { status: 404 });
    }

    const record = result.records[0];
    return NextResponse.json({
      name: record.get("name"),
      description: record.get("description"),
      link: record.get("link"),
    });
  } catch (err) {
    console.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏û‡∏£‡∏£‡∏Ñ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
    return NextResponse.json({ error: "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" }, { status: 500 });
  } finally {
    await session.close();
  }
}

export async function PUT(
  req: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  const { id } = await context.params; // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á await
  const numericId = parseInt(id);

  if (isNaN(numericId)) {
    return NextResponse.json({ error: "ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }, { status: 400 });
  }

  const { name, description, link } = await req.json();
  const session = driver.session();
  const client = await pool.connect();

  try {
    // üî∏ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô PostgreSQL
    await client.query("UPDATE parties SET name = $1 WHERE id = $2", [name, id]);

    // üîπ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô Neo4j
    await session.run(
      `
      MATCH (p:Party {id: $id})
      SET p.name = $name,
          p.description = $description,
          p.link = $link
      `,
      { id, name, description, link }
    );

    return NextResponse.json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏£‡∏£‡∏Ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏û‡∏£‡∏£‡∏Ñ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
    return NextResponse.json({ error: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" }, { status: 500 });
  } finally {
    await session.close();
    client.release();
  }
}

export async function DELETE(
  req: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  const { id } = await context.params; // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á await
  const numericId = parseInt(id);

  if (isNaN(numericId)) {
    return NextResponse.json({ error: "ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }, { status: 400 });
  }

  const session = driver.session();
  const client = await pool.connect();

  try {
    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏£‡∏£‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏•‡∏ö logo
    const result = await client.query("SELECT name FROM parties WHERE id = $1", [numericId]);
    if (result.rowCount === 0) {
      return NextResponse.json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏£‡∏£‡∏Ñ‡∏ô‡∏µ‡πâ" }, { status: 404 });
    }
    const name = result.rows[0].name;

    // ‚úÖ ‡∏•‡∏ö‡πÉ‡∏ô PostgreSQL
    await client.query("DELETE FROM parties WHERE id = $1", [numericId]);

    // ‚úÖ ‡∏•‡∏ö‡πÉ‡∏ô Neo4j
    await session.run("MATCH (p:Party {id: $id}) DETACH DELETE p", { id: numericId });

    // ‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå logo ‡∏à‡∏≤‡∏Å Firebase
    try {
      const logoRef = ref(storage, `party/logo/${name}.png`);
      await deleteObject(logoRef);
    } catch (err) {
  if (err instanceof Error) {
    console.warn("‚ö†Ô∏è ‡∏•‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏à‡∏≤‡∏Å Firebase ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err.message);
  } else {
    console.warn("‚ö†Ô∏è ‡∏•‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏à‡∏≤‡∏Å Firebase ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
  }
}

    return NextResponse.json({ message: "‡∏•‡∏ö‡∏û‡∏£‡∏£‡∏Ñ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err) {
    console.error("‚ùå ‡∏•‡∏ö‡∏û‡∏£‡∏£‡∏Ñ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
    return NextResponse.json({ error: "‡∏•‡∏ö‡∏û‡∏£‡∏£‡∏Ñ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" }, { status: 500 });
  } finally {
    await session.close();
    client.release();
  }
}

